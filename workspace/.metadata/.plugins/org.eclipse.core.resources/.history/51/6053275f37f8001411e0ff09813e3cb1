package hangman;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;

public class EvilHangmanGame implements IEvilHangmanGame {
  
  private int numberOfGuesses = 0;
  private int wordLength = 0;
  private String currentPattern = null;
  private Set<Character> guessList = new HashSet<Character>();
  private Set<String> wordList = new HashSet<String>();
  
  // initialization
  
  @Override
  public void startGame(File dictionary, int wordLength) {
    clear();
    this.wordLength = wordLength;
    generateBlankPattern();
    generateWordList(dictionary);
  }
  
  private void generateWordList(File dictionary) {
    String word = null;
    try (Scanner scanner = new Scanner(dictionary)) {
      while (scanner.hasNext()) {
        word = scanner.next();
        if (word.length() == wordLength) {
          wordList.add(word);
        }
      }
    } catch (FileNotFoundException e) {
      e.printStackTrace();
    }
  }

  private void generateBlankPattern() {
    StringBuilder pattern = new StringBuilder();
    for (int i = 0; i < wordLength; i++) {
      pattern.append("-");
    }
    currentPattern = pattern.toString();
  }

  private void clear() {
    numberOfGuesses = 0;
    wordLength = 0;
    currentPattern = null;
    guessList.clear();
    wordList.clear();
  }

  // playing the game

  public void playGame(int numberOfGuesses) {
    this.numberOfGuesses = numberOfGuesses;
    Scanner input = new Scanner(System.in);
    char guess = '\0';
    drawGame();
    while (numberOfGuesses > 0 && wordList.size() > 1) {
      guess = getGuess(input);
    }
    input.close();
  }
  
  private char getGuess(Scanner input) {
    String guessString = "";
    char guessChar = '\0';
    System.out.print("Enter guess: ");
    guessString = input.next();
    guessChar = guessString.charAt(0);
    while (guessString.length() > 1 || !Character.isLetter(guessChar)) {
      System.err.print("error: guess must be a single valid letter character");
      guessString = input.next();
      guessChar = guessString.charAt(0);
    }
    return Character.toLowerCase(guessChar);
  }

  private void drawGame() {
    System.out.printf("You have %d guesses left\n", numberOfGuesses);
    System.out.print("Used letters: ");
    for (Character c : guessList) {
      System.out.print(c + " ");
    }
    System.out.printf("\nWord: %s\n", currentPattern);
  }

  // partitioning the words

  // playing the game
  // playing the game
  // playing the game
  // playing the game
  // playing the game
  @Override
  public Set<String> makeGuess(char guess) throws GuessAlreadyMadeException {
    // TODO Auto-generated method stub
    // TODO make sure field dictionary is set to new one
    return null;
  }
  
  public String makeKey(String word, char guess) {
    // TODO make a key from dashes and stuff
    return "";
  }
  
  // TODO for tie breaker make a second map to put max and ties in, if new max
  // found than clear and add new one
  // use compareto for finding rightmost letter tiebreaker, greater is 
  // rightmost (maybe)

}