package spell;

public class Trie implements ITrie {
  
  private int nodeCount = 1;
  private int wordCount = 0;
  private Node root = new Node();

  @Override
  public void add(String word) {
    word.toLowerCase();
    Node currentNode = root;
    for (char c : word.toCharArray()) {
      int index = c - 'a';
      if (currentNode.alphabet[index] == null) {
        currentNode.alphabet[index] = new Node();
        nodeCount++;
      }
      currentNode = currentNode.alphabet[index];
    }
    if (currentNode.frequency == 0) {
      wordCount++;
    }
    currentNode.incramentFrequency();
  }

  @Override
  public INode find(String word) {
    word.toLowerCase();
    Node currentNode = root;
    int index = 0;
    for (char c : word.toCharArray()) {
      index = c -'a';
      if (currentNode.alphabet[index] == null) {
        return null;
      }
      currentNode = currentNode.alphabet[index];
    }
    if (currentNode.frequency == 0) { 
      return null;
    }
    return currentNode;
  }

  @Override
  public String toString() {
    return "";
  }
  
  @Override
  public int hashCode() {
    final int PRIME_NUMBER = 31;
    return (wordCount + nodeCount) * PRIME_NUMBER;
  }
  
  @Override
  public boolean equals(Object o) {
    return false;
  }
  
  @Override
  public int getWordCount() {
    return wordCount;
  }

  @Override
  public int getNodeCount() {
    return nodeCount;
  }
  
  public class Node implements ITrie.INode {
    
    private int frequency = 0;
    private Node[] alphabet = new Node[26];
    
    public int getValue() {
      return frequency;
    }
    
    public int getFrequency() {
      return frequency;
    }

    public void incramentFrequency() {
      frequency++;
    }
  }

}
